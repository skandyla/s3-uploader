name: Build and Deploy

on:
  push:
    branches:
      - master
    tags:
      - "*"

env:
  # requirements: provision infrastructure via terraform, then set corresponding values
  # note that repository should have secrets AWS_ACCESS_KEY_ID \ AWS_SECRET_ACCESS_KEY
  AWS_REGION: eu-west-3
  ECS_CLUSTER: sk-test                       # aws ecs list-clusters
  ECR_REPOSITORY: sk-test-s3-uploader        # aws ecr describe-repositories
  ECS_TASK_DEFINITION: sk-test-s3-uploader   # aws ecs list-task-definitions
  ECS_SERVICE: s3-uploader                   # aws ecs list-services --cluster sk-test
  CONTAINER_NAME: s3-uploader                # service-name at terraform config repo
  IMAGENAME: s3-uploader                     # self-service name at Makefile

jobs:
  build:
    name: Build_Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Prepary deps
        run: |
          echo -e "machine github.com\n  login ${{ secrets.GITHUBTOKEN }}" > ~/.netrc
          make get_deps
    
      - name: Test code
        id: test-code
        run: make test

      - name: Tests coverage
        run: make cover

      - name: Build binary and docker image
        id: build-image
        run: |
          make build
          make docker_image
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag ${{ env.IMAGENAME }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag ${{ env.IMAGENAME }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition --region ${{ env.AWS_REGION }} | tee task-definition.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.push-image.outputs.image }}
  
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
  